"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=u(t),m=i,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6840:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return s}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={},l=void 0,u={unversionedId:"Sample App",id:"Sample App",title:"Sample App",description:"To understand the connection flow and behaviors of the library, you can play around, debug, and run the sample SwiftUI App that connects to HiveMQ public broker.",source:"@site/docs/Sample App.md",sourceDirName:".",slug:"/Sample App",permalink:"/courier-iOS/docs/Sample App",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Sample App.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/courier-iOS/docs/Installation"},next:{title:"Setup Connection",permalink:"/courier-iOS/docs/Setup Connection"}},p={},s=[{value:"Steps",id:"steps",level:2},{value:"HiveMQAuthService",id:"hivemqauthservice",level:2},{value:"Client Setup in CourierObservableObject",id:"client-setup-in-courierobservableobject",level:2}],d={toc:s};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To understand the connection flow and behaviors of the library, you can play around, debug, and run the sample SwiftUI App that connects to ",(0,o.kt)("a",{parentName:"p",href:"https://broker.mqttdashboard.com"},"HiveMQ")," public broker. "),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Clone the project from ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/gojek/courier-iOS"},"GitHub")),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"pod install")),(0,o.kt)("li",{parentName:"ul"},"Open ",(0,o.kt)("inlineCode",{parentName:"li"},"Courier.xcworkspace")),(0,o.kt)("li",{parentName:"ul"},"Select ",(0,o.kt)("inlineCode",{parentName:"li"},"Chat-Example")," from the scheme.")),(0,o.kt)("h2",{id:"hivemqauthservice"},"HiveMQAuthService"),(0,o.kt)("p",null,"The app provides ",(0,o.kt)("inlineCode",{parentName:"p"},"HiveMQAuthService")," that conforms to ",(0,o.kt)("inlineCode",{parentName:"p"},"IConnectionServiceProvider")," to provide connection options to public HiveMQ Broker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'final class HiveMQAuthService: IConnectionServiceProvider {\n\n  var extraIdProvider: (() -> String?)?\n\n  var clientId: String {\n      let deviceId = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString\n      return "\\(deviceId)|\\(username)"\n  }\n\n  private let username = "123456"\n\n  func getConnectOptions(completion: @escaping (Result<ConnectOptions, AuthError>) -> Void) {\n      let connectOptions = ConnectOptions(\n          host: "broker.mqttdashboard.com",\n          port: 1883,\n          keepAlive: 60,\n          clientId: clientId,\n          username: username,\n          password: "",\n          isCleanSession: false,\n          userProperties: ["service": "hivemq", "type": "public"]\n      )\n\n      completion(.success(connectOptions))\n  }\n}\n')),(0,o.kt)("h2",{id:"client-setup-in-courierobservableobject"},"Client Setup in CourierObservableObject"),(0,o.kt)("p",null,"You can peek at how the client is created and configured inside ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierObservableObject")," class ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'  \nfunc connect() {\n    let clientFactory = CourierClientFactory()\n    let courierClient = clientFactory.makeMQTTClient(\n        config: MQTTClientConfig(\n            authService: HiveMQAuthService(),\n            messageAdapters: [\n                JSONMessageAdapter(),\n                TextMessageAdapter()\n            ],\n            autoReconnectInterval: 1,\n            maxAutoReconnectInterval: 30,\n            connectTimeoutPolicy: ConnectTimeoutPolicy(isEnabled: true),\n            idleActivityTimeoutPolicy: IdleActivityTimeoutPolicy(isEnabled: true),\n            messagePersistenceTTLSeconds: 86400,\n            messageCleanupInterval: 10\n        )\n    )\n\n    courierClient.connect()\n    courierClient.subscribe((topic, qos))\n    courierClient.messagePublisher(topic: topic)\n        .sink { [weak self] (message: String) in\n            guard let self = self else { return }\n            self.messages.insert(Message(id: UUID().uuidString, name: "Text Adapter: \\(message)", timestamp: Date()), at: 0)\n        }.store(in: &cancellables)\n}\n')))}m.isMDXComponent=!0}}]);