"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[61],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,c(c({ref:n},l),{},{components:t})):r.createElement(g,c({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var u=2;u<i;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3946:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),c=["components"],a={},s=void 0,u={unversionedId:"Event Handling",id:"Event Handling",title:"Event Handling",description:"Handle Courier Events",source:"@site/docs/Event Handling.md",sourceDirName:".",slug:"/Event Handling",permalink:"/courier-iOS/docs/Event Handling",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Event Handling.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"README",permalink:"/courier-iOS/docs/"},next:{title:"Courier iOS - Contribution Guidelines",permalink:"/courier-iOS/docs/CONTRIBUTION"}},l={},p=[{value:"Handle Courier Events",id:"handle-courier-events",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"handle-courier-events"},"Handle Courier Events"),(0,i.kt)("p",null,"Courier provides ability to register and listen to internal events emitted by the Client. All you need to do is conforming to ",(0,i.kt)("inlineCode",{parentName:"p"},"ICourierEventHandler")," protocol and implement ",(0,i.kt)("inlineCode",{parentName:"p"},"ICourierEventHandler/onEvent(_:)")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class MyEventHandler: ICourierEventHandler {\n\n  func onEvent(_ event: CourierEvent) {\n      // Implement your own event handling logic (e.g logging to analytics, etc)\n  }\n}\n")),(0,i.kt)("p",null,"Finally, make sure to have strong reference to the instance, and invoke the ",(0,i.kt)("inlineCode",{parentName:"p"},"addEventHandler(_:)")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"CourierClient")," passing the instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"courierClient.addEventHandler(analytics)\n")),(0,i.kt)("p",null,"List of ",(0,i.kt)("inlineCode",{parentName:"p"},"CourierEvent")," enumerations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public enum CourierEvent {\n\n    case connectionServiceAuthStart(source: String? = nil)\n    case connectionServiceAuthSuccess(host: String, port: Int, isCache: Bool)\n    case connectionServiceAuthFailure(error: Error?)\n    case connectedPacketSent\n    case courierDisconnect(clearState: Bool)\n\n    case connectionAttempt\n    case connectionSuccess\n    case connectionFailure(error: Error?)\n    case connectionLost(error: Error?, diffLastInbound: Int?, diffLastOutbound: Int?)\n    case connectionDisconnect\n    case reconnect\n    case connectDiscarded(reason: String)\n\n    case subscribeAttempt(topic: String)\n    case unsubscribeAttempt(topic: String)\n    case subscribeSuccess(topic: String)\n    case unsubscribeSuccess(topic: String)\n    case subscribeFailure(topic: String, error: Error?)\n    case unsubscribeFailure(topic: String, error: Error?)\n\n    case ping(url: String)\n    case pongReceived(timeTaken: Int)\n    case pingFailure(timeTaken: Int, error: Error?)\n\n    case messageReceive(topic: String, sizeBytes: Int)\n    case messageReceiveFailure(topic: String, error: Error?, sizeBytes: Int)\n\n    case messageSend(topic: String, qos: QoS, sizeBytes: Int)\n    case messageSendSuccess(topic: String, qos: QoS, sizeBytes: Int)\n    case messageSendFailure(topic: String, qos: QoS, error: Error?, sizeBytes: Int)\n\n    case appForeground\n    case appBackground\n    case connectionAvailable\n    case connectionUnavailable\n}\n")))}m.isMDXComponent=!0}}]);